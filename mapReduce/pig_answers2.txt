(i)

(a)
1 map and 0 reduce for the first job
2 maps and 1 reduce for the second job

(b)
pairriding: {
    winners::date: bytearray,
    winners::type: chararray,
    winners::parl: int,
    winners::prov: chararray,
    winners::riding: chararray,
    winners::lastname: chararray,
    winners::firstname: chararray,
    winners::gender: chararray,
    winners::occupation: chararray,
    winners::party: chararray,
    winners::votes: int,
    winners::percent: double,
    winners::elected: int,
    losers::date: bytearray,
    losers::type: chararray,
    losers::parl: int,
    losers::prov: chararray,
    losers::riding: chararray,
    losers::lastname: chararray,
    losers::firstname: chararray,
    losers::gender: chararray,
    losers::occupation: chararray,
    losers::party: chararray,
    losers::votes: int,
    losers::percent: double,
    losers::elected: int
}

(c)
42 seconds


(ii)

(a)
1 map and 0 reduce for the first job
2 maps and 4 reduce for the second job

(b)
42 seconds

(c)
No. We would expect the modified script to be faster since it added parallelism, but it did not.
We thought it would be faster, but it is not since each part requires overhead and we did not have enough data for it to make a difference.
